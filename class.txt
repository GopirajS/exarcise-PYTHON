
>>> class demo():
	pass

>>> class demo:
	pass

>>> class demo(object):
	pass

>>> #using constracter
>>> # other name dundun
>>> class demo(object):
	def __init__(self,name,age,city):
		self.name=name
		self.age=age
		self.my_city=city
		print("this mesage from constracter")
	def dis(self):
		print(f"my name is {self.name}")
		print("my age is ",self.age)
		print("my city is %s",self.my_city)

		
>>> s=demo("gopiraj","21","salem")
this mesage from constracter
>>> s.dis()
my name is gopiraj
my age is  21
my city is %s salem
>>> s.dis
<bound method demo.dis of <__main__.demo object at 0x000001E8F5A3CEB0>>
>>> s.
SyntaxError: invalid syntax
>>> s.age
'21'
>>> s.name
'gopiraj'
>>> s.my_city
'salem'
>>>


======================================================



>>> class Person:
	def __init__(mysillyobject, name, age):
		mysillyobject.name = name
		mysillyobject.age = age
	def myfunc(abc):
		print("Hello my name is " + abc.name)

>>> s=Person("gopi",21)
>>> s.age
21
>>> s.name
'gopi'
>>> s.myfunc()
Hello my name is gopi


>>> class demo:
	def __init__(my_object,name,age,city):
		my_object.city=city

		print(name)
		print(age)
	def dis(abc):
		print(abc.city)

		
>>> s=demo("gopi",21,"salem")
gopi
21
>>> s.dis
<bound method demo.dis of <__main__.demo object at 0x000001929A3AC280>>
>>> s.dis()
salem
>>>


==========================================

>>> class parrot:
	def __init__(self,name,age):
		self.name=name
		self.age=age
	def dis(self):
		print(self.name,self.age)

		
>>> s=parrot("gopi",21)
>>> s.age
21
>>> s.name
'gopi'
>>> s.dis()
gopi 21
>>> dir(s)
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'age', 'dis', 'name']



>>> class parrot:
	species="birds"
	def __init__(self,name,age):
		self.name=name
		self.age=age
	def dis(self):
		print(self.name,self.age)

		
>>> 
>>> blu=parrot("blu",10)
>>> woo=parrot("woo",15)
>>> 
>>> print("{}is {}".format(blu.name,blu.age))
bluis 10
>>> print("{} is {} year old".format(blu.name,blu.age))
blu is 10 year old
>>> print("{} is {}".format(woo.name,woo.age))
woo is 15
>>> print("{} is {} year old".format(woo.name,woo.age))
woo is 15 year old
>>> print("blu is {}".format(blu.__class__.species))
blu is birds
>>> print("blu is {}".format(woo.__class__.species))
blu is birds
>>> 


====================================   return keyword using    ==================

>>> class parrot:
	species="birds"
	def __init__(self,name,age):
		self.name=name
		self.age=age
	def song(self,sing):
		return "{} is now singing {} ".format(self.name,sing)
	def dance(self):
		return "{} is dancing".format(self.name)

	
>>> s=parrot("gopi",21)
>>> s.age
21
>>> s.name
'gopi'
>>> s.song("happy")
'gopi is now singing happy '
>>> s.dance()
'gopi is dancing'
>>> 

==============================
>>> class person:
	age=21
	def get(g,name,city):
		print(person.age)
		g.name=name
		g.city=city
	def dis(self):
		print(self.name)
		print(self.city)

		
>>> s=person()
>>> s.age
21
>>> s.get
<bound method person.get of <__main__.person object at 0x0000025E7DCED280>>
>>> s.get("gopiraj","salem")
21

>>> s.age
21
>>> s.city
'salem'
>>> s.dis()
gopiraj
salem






class Polygon:
	def __init__(self, no_of_sides):
		self.n = no_of_sides
		self.sides = [0 for i in range(no_of_sides)]
	def inputSides(self):
		self.sides = [float(input("Enter side "+str(i+1)+" : ")) for i in range(self.n)]
	def dispSides(self):
		for i in range(self.n):
			print("Side",i+1,"is",self.sides[i])

    
    
    
>>>#===========================================================================================



>>> class dog:
	pass

>>> dog
<class '__main__.dog'>

>>> s=dog()

>>> s
<__main__.dog object at 0x000001FDA326BDC0>

>>> class dog:
	attr1='mammal'
	attr2='dog'
	def fun(self):
		print('im a',self.attr1)
		print('im a',self.attr2)

		
>>> s=dog()

>>> s.attr1
'mammal'

>>> s.attr2
'dog'

>>> s.fun()
im a mammal
im a dog

>>> class my_class():
	def __init__(self,name):
		self.name=name
	def say_hi(self):
		print('hellow ,my name is ',self.name)

		

>>> obj=my_class('gopi')

>>> obj.name
'gopi'

>>> obj.say_hi()
hellow ,my name is  gopi

>>> class my_dog():
	animal='dog'
	def __init__(self,breed):
		self.breed=breed
	def set_colore(self,colore):
		self.colore=colore
	def get_colore(self):
		return self.colore


>>> s=my_dog('pug')

>>> s.animal
'dog'

>>> s.breed
'pug'

>>> s.set_colore('brown')

>>> s.get_colore
<bound method my_dog.get_colore of <__main__.my_dog object at 0x000001FDA326B2E0>>

>>> s.get_colore()
'brown'

>>> s.set_colore('red')


>>> s.colore
'red'

>>> s.animal
'dog'

>>> class my_class(object):
	def __init__(self):
		self.geek='hellow world '
	def print_str(self):
		print(self.geek)

		
>>> s=my_class()

>>> s.geek
'hellow world '

>>> s.print_str()
hellow world 

>>> class adding(object):
	def __init__(self,f,s):
		self.f=f
		self.s=s
	def display(self):
		print('first number :',self.f)
		print('second number:',self.s)
	def calculate(self):
		self.answer=self.f+self.s

		

>>> s=adding(3,4)

>>> s.f
3

>>> s.s
4

>>> s.display()
first number : 3
second number: 4

>>> s.display()
first number : 3
second number: 4
>>> s.calculate()

>>> class adding(object):
	def __init__(self,f,s):
		self.f=f
		self.s=s
	def display(self):
		print('first number :',self.f)
		print('second number:',self.s)
	def calculate(self):
		self.answer=self.f+self.s
		return self.answer

	
>>> s=adding(3,4)

>>> s.display()
first number : 3
second number: 4

>>> s.calculate()
7

>>> s.answer
7

>>> s.calculate()
7

>>> #------------------------------------------------

>>> class my_class(object):
	def __init__(self,name):
		self.name=name
	def __del__(self):
		print('destructor')

		


>>> s=my_class('gopi')

>>> s.name
'gopi'

>>> del s
destructor
>>> a=my_class('sathish')

>>> a.name
'sathish'

>>> class employ:
	def __init__(self):
		print('employ created')
	def __del__(self):
		print("Destructor called")

		
>>> def creat_obj():
	print("making object")
	obj=employ()
	print('fnction  end...')
	return obj


>>> obj=creat_obj()
making object
employ created
fnction  end...

>>> obj=employ()
employ created
Destructor called

>>> obj
<__main__.employ object at 0x000001FDA326BA30>

>>> class A:
	def __init__(self):
		print('Employee create')
	def __del__(self):
		print('Destructor called')

		

>>> obj==A
False

>>> obj=A
Destructor called

>>> obj=A()
Employee create
